import re
import random
import os
from flask import Blueprint, request, render_template
from markupsafe import escape
import docx  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ: pip install python-docx

mc_quiz_word_bp = Blueprint('mc_quiz_word', __name__)

def process_word_quiz(doc_path):
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç doc/docx-—Ñ–∞–π–ª, –≥–¥–µ –∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
      (—Å—Ç—Ä–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–∞)
      ‚úì - –≤–∞—Ä–∏–∞–Ω—Ç
      ‚úó - –≤–∞—Ä–∏–∞–Ω—Ç
      ...
    (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) => –∫–æ–Ω–µ—Ü –≥—Ä—É–ø–ø—ã
    """
    document = docx.Document(doc_path)
    paragraphs = [p.text.strip() for p in document.paragraphs if p.text.strip()]

    quiz_questions = []
    i = 0
    question_index = 0
    while i < len(paragraphs):
        question = paragraphs[i]
        i += 1
        options = []
        correct_answer = None

        # —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã: —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "‚úì" –∏–ª–∏ "‚úó"
        while i < len(paragraphs) and (paragraphs[i].startswith("‚úì") or paragraphs[i].startswith("‚úó")):
            line = paragraphs[i]
            parts = line.split("-", 1)
            if len(parts) == 2:
                marker = parts[0].strip()
                option_text = parts[1].strip()
                options.append(option_text)
                if marker.startswith("‚úì"):
                    correct_answer = option_text
            i += 1

        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
        if question and options and correct_answer:
            html = f'<p>{escape(question)}</p>'
            html += '<div class="mc-options" data-correct="{escape(correct_answer)}">'

            random.shuffle(options)
            for opt in options:
                html += (
                    f'<div class="mc-option-row" data-correct="{escape(correct_answer)}">'
                    f'  <input type="radio" name="q_{question_index}">'
                    f'  <span class="mc-option-label">{escape(opt)}</span>'
                    f'  <span class="trash-icon">üóë</span>'
                    f'</div>'
                )
            html += '</div>'
            quiz_questions.append(html)
            question_index += 1

    return quiz_questions

def process_text_quiz(raw_text):
    """
    –ü–∞—Ä—Å–∏—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –≥–¥–µ:
      1) —Å—Ç—Ä–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
      2) —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "‚úì - ..." –∏–ª–∏ "‚úó - ...",
      3) –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ => –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    """
    lines = [l.strip() for l in raw_text.splitlines()]
    # —É–±–∏—Ä–∞–µ–º —Å–æ–≤—Å–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç —Å–ª—É–∂–∏—Ç—å ¬´—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏¬ª
    # —Ç–∞–∫ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è break, –Ω–æ –Ω–µ —Ç–µ—Ä—è–µ–º –∏—Ö —Å–æ–≤—Å–µ–º
    # –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ ‚Äì –æ—Å—Ç–∞–≤–∏–º raw_lines, –∞ –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
    # –û–¥–Ω–∞–∫–æ –ø—Ä–æ—â–µ –≤—Å—ë –∂–µ —É–±—Ä–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É ¬´–∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞—á —Å ‚úì/‚úó => –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞¬ª
    # –ù–∏–∂–µ ‚Äì –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    lines = [l for l in lines if l]  # —É–±—Ä–∞–ª–∏ –ø—É—Å—Ç—ã–µ

    i = 0
    n = len(lines)
    quiz_questions = []
    question_index = 0

    while i < n:
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì question
        question = lines[i]
        i += 1
        options = []
        correct_answer = None

        # —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ –≤—Å—Ç—Ä–µ—á–∏ ¬´—Å–ª–µ–¥—É—é—â–µ–π¬ª —Å—Ç—Ä–æ–∫–∏,
        # –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚úì / ‚úó (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å)
        while i < n:
            line = lines[i]
            if line.startswith("‚úì") or line.startswith("‚úó"):
                parts = line.split("-", 1)
                if len(parts) == 2:
                    marker = parts[0].strip()
                    option_text = parts[1].strip()
                    options.append(option_text)
                    if marker.startswith("‚úì"):
                        correct_answer = option_text
                i += 1
            else:
                # –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—É—é ¬´–≤–æ–ø—Ä–æ—Å–Ω—É—é¬ª —Å—Ç—Ä–æ–∫—É
                break

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º html
        if question and options and correct_answer:
            html = f'<p>{escape(question)}</p>'
            html += '<div class="mc-options" data-correct="{escape(correct_answer)}">'

            random.shuffle(options)
            for opt in options:
                html += (
                    f'<div class="mc-option-row" data-correct="{escape(correct_answer)}">'
                    f'  <input type="radio" name="q_{question_index}">'
                    f'  <span class="mc-option-label">{escape(opt)}</span>'
                    f'  <span class="trash-icon">üóë</span>'
                    f'</div>'
                )
            html += '</div>'
            quiz_questions.append(html)
            question_index += 1

    return quiz_questions

@mc_quiz_word_bp.route('/mc_quiz_word', methods=['GET','POST'])
def mc_quiz_word():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ Multiple Choice:
      - –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å doc/docx
      - –ò–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç (—Å –≤–æ–ø—Ä–æ—Å–∞–º–∏/–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
      - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π quiz
    """
    quiz_questions = []

    if request.method == 'POST':
        # –ó–∞–≥—Ä—É–∑–∏–ª–∏ Word-—Ñ–∞–π–ª?
        if 'word_file' in request.files and request.files['word_file'].filename:
            file = request.files['word_file']
            from werkzeug.utils import secure_filename
            filename = secure_filename(file.filename)
            upload_dir = os.path.join('static', 'uploads')
            os.makedirs(upload_dir, exist_ok=True)
            file_path = os.path.join(upload_dir, filename)
            file.save(file_path)

            quiz_questions = process_word_quiz(file_path)
            os.remove(file_path)
        else:
            # –ò–Ω–∞—á–µ —Å–º–æ—Ç—Ä–∏–º input_text
            input_text = request.form.get("input_text","").strip()
            if input_text:
                quiz_questions = process_text_quiz(input_text)

    return render_template("mc_quiz_word.html", quiz_questions=quiz_questions)
